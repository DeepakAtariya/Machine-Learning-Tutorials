dataset = read.csv('Data.csv')
setwd("D:/codes/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
dataset = read.csv('Data.csv')
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Country = factor(dataset$Country, levels = c('France', 'Spain','Germany'),labels=c(1,2,3))
dataset$Country = factor(dataset$Country, levels = c('No', 'Yes'),labels=c(0,1))
View(dataset)
dataset$Country = factor(dataset$Country, levels = c('No', 'Yes'),labels=c(0,1))
View(dataset)
dataset$Purchased = factor(dataset$Country, levels = c('No', 'Yes'),labels=c(0,1))
View(dataset)
dataset$Purchased = factor(dataset$Purchased, levels = c('No', 'Yes'),labels=c(0,1))
View(dataset)
#encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain','Germany'),
labels = c(1,2,3))
View(dataset)
#encoding categorical data
View(dataset)
View(dataset)
View(dataset)
#Splitting the dataset into the training set and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset = read.csv('Data.csv')
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain','Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels=c(0,1))
#Splitting the dataset into the training set and test set
View(dataset)
dataset = read.csv('Data.csv')
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain','Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels=c(0,1))
#Splitting the dataset into the training set and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset = read.csv('Data.csv')
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain','Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels=c(0,1))
#Splitting the dataset into the training set and test set
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
dataset = read.csv('Data.csv')
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels=c(0,1))
#Splitting the dataset into the training set and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
setwd("D:/codes/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
dataset = read.csv('Data.csv')
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels=c(0,1))
#Splitting the dataset into the training set and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
View(test_set)
View(training_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[, 2:3] = scale(test_set[,2:3])
View(training_set)
View(training_set)
View(test_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[, 2:3] = scale(test_set[,2:3])
View(training_set)
setwd("D:/codes/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
dataset = read.csv('Data.csv')
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels=c(0,1))
#Splitting the dataset into the training set and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling
training_set[,2:3] = scale(training_set[,2:3])
test_set[, 2:3] = scale(test_set[,2:3])
View(training_set)
View(test_set)
View(dataset)
View(training_set)
View(test_set)
setwd("D:/codes/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset = read.csv('Data.csv')
#taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels=c(0,1))
#Splitting the dataset into the training set and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling
training_set[,2:3] = scale(training_set[,2:3])
test_set[, 2:3] = scale(test_set[,2:3])
View(test_set)
View(test_set)
#taking care of missing data
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset = read.csv('Salary_Data.csv')
#taking care of missing data
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
traning_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
View(test_set)
View(traning_set)
#Fitting Simple Linear Regression to the training set
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
#Fitting Simple Linear Regression to the training set
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
dataset = read.csv('Salary_Data.csv')
#taking care of missing data
#Splitting the dataset into the Training set test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Fitting Simple Linear Regression to the training set
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
View(regressor)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred = predict(regressor, newdata = test_set)
View(test_set)
y_pred
install.packages('ggplot2')
library(ggplot2)
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_point(aes(x= training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_point(aes(x= training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_line(aes(x= training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
#Visulisaing the test set results
#install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x= test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_point(aes(x= training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_line(aes(x= training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (test set)') +
xlab('Years of experience') +
ylab('Salary')
